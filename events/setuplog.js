const fs = require('fs');
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const discord = require("discord.js");
const path = require('path');
const config = require("./config");
const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMembers,
      GatewayIntentBits.GuildBans,
      GatewayIntentBits.GuildEmojisAndStickers,
      GatewayIntentBits.GuildIntegrations,
      GatewayIntentBits.GuildWebhooks,
      GatewayIntentBits.GuildInvites,
      GatewayIntentBits.GuildVoiceStates,
      GatewayIntentBits.GuildPresences,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.GuildMessageReactions,
      GatewayIntentBits.GuildMessageTyping,
      GatewayIntentBits.DirectMessages,
      GatewayIntentBits.DirectMessageReactions,
      GatewayIntentBits.DirectMessageTyping,
      GatewayIntentBits.MessageContent,
      GatewayIntentBits.GuildScheduledEvents
    ],
    
  });


// Assurez-vous que seul le dossier `events` est mentionn√© ici
const CONFIG_PATH = path.join(__dirname, 'log.json');

let logChannels = {
  roleLogsChannelId: null,
  sanctionLogChannelId: null,
  messageLogChannelId: null,
  voiceLogChannelId: null,
  d√©laiLogChannelId: null,
  joinLogChannelId: null,
  autreLogChannelId: null,
  canalLogChannelId: null,
};

// Fonction pour charger les IDs depuis le fichier de configuration si existant
const loadConfig = () => {
  if (fs.existsSync(CONFIG_PATH)) {
      const data = fs.readFileSync(CONFIG_PATH);
      logChannels = JSON.parse(data);
  } else {
      // Cr√©er un fichier vide si non existant
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(logChannels, null, 2));
  }
};

// Appeler cette fonction au d√©marrage pour charger les donn√©es
loadConfig();

const createLogChannels = async (interaction) => {
  try {
      // R√©pondre rapidement pour √©viter l'erreur d'interaction inconnue
      await interaction.deferReply({ ephemeral: true });

      const guild = interaction.guild;

      // Cr√©ation de la cat√©gorie 'log'
      const category = await guild.channels.create({
          name: '„ÄîüìÅ„Äïlogs',
          type: 4, // Type 4 repr√©sente une cat√©gorie
          permissionOverwrites: [
              {
                  id: guild.roles.everyone.id,
                  deny: ['ViewChannel'],
              },
          ],
      });

      // Cr√©ation des salons dans la cat√©gorie
      const channelNames = [
          '„ÄîüìÅ„Äïr√¥le-logs',
          '„ÄîüìÅ„Äïsanction-log',
          '„ÄîüìÅ„Äïmessage-log',
          '„ÄîüìÅ„Äïvoice-log',
          '„ÄîüìÅ„Äïd√©lai-log',
          '„ÄîüìÅ„Äïjoin-log',
          '„ÄîüìÅ„Äïautre-log',
          '„ÄîüìÅ„Äïcanal-log',
      ];

      const channelPromises = channelNames.map((name) => 
          guild.channels.create({
              name: name,
              type: 0, // Type 0 repr√©sente un salon texte
              parent: category.id,
          })
      );

      const channels = await Promise.all(channelPromises);

      // Mise √† jour des IDs dans la variable globale
      logChannels = {
          roleLogsChannelId: channels[0].id,
          sanctionLogChannelId: channels[1].id,
          messageLogChannelId: channels[2].id,
          voiceLogChannelId: channels[3].id,
          d√©laiLogChannelId: channels[4].id,
          joinLogChannelId: channels[5].id,
          autreLogChannelId: channels[6].id,
          canalLogChannelId: channels[7].id,
      };

      // √âcriture dans un fichier de configuration pour persister les donn√©es
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(logChannels, null, 2));

      await interaction.editReply('Cat√©gorie des logs cr√©√©s avec succ√®s.');
  } catch (error) {
      console.error('Erreur lors de la cr√©ation de la cat√©gorie de journal et des canaux :', error);
      await interaction.editReply('Une erreur s\'est produite lors de la cr√©ation des logs.');
  }
};

// √âv√©nement lors de la r√©ception d'une interaction
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'setup-log') {
      // V√©rifie les permissions de l'utilisateur
      if (!interaction.member.permissions.has('Administrator')) {
        return interaction.reply({ content: 'Vous n\'avez pas les permissions n√©cessaires pour utiliser cette commande.'});
      }

      // Appelle la fonction pour cr√©er les salons
      await createLogChannels(interaction);
  }
});

// NE PAS MODIFIER
client.login(config.token)
  .catch(console.error);